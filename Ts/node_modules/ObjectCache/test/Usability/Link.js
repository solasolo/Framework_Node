const { Link } = require('../../lib/algorithm/Link');
const assert = require('assert');

let link = null;
let index = [];


/*
function describe(name, func) {
    let val = func();
    console.log(name, val);

    return val;
}

function it(name, func) {
    let val = func();
    console.log(name, val);

    return val;
}
*/

var reset = function (link) {
    var arr = [];
    for (var i = 0; i < 5; i++) {
        var node = Link.CreateNode("key_" + i);
        arr.push(node);
        link.unshift(node);
    }

    return arr;
};

describe('Node', function () {
    it("init success", function () {
        var node = Link.CreateNode("key");

        assert.equal(node.Value, "key");
        assert.equal(node.Next, null);
        assert.equal(node.Prev, null);
    });
});

describe('Link', function () {
    it("init success", function () {
        var link = new Link();

        assert.equal(link.Length, 0);
        assert.equal(link.Head, null);
        assert.equal(link.Tail, null);
    });

    it("unshift method should return which insert", function () {
        var link = new Link();
        var node = Link.CreateNode("key");

        var returnNode = link.unshift(node);

        assert.equal(returnNode.Value, "key");
        assert.equal(returnNode.Next, null);
        assert.equal(returnNode.Prev, null);
    });

    it("pop method should return the last one", function () {
        var link = new Link();

        for (var i = 0; i < 10; i++) {
            var node = Link.CreateNode("key_" + i);
            link.unshift(node);
        }

        assert.equal(link.pop().Value, "key_0");
    });

    it("print method should return the key order array", function () {
        var link = new Link();

        reset(link);

        assert.equal(link.print().join(", "), "key_4, key_3, key_2, key_1, key_0");
    });

    it("Forward", function () {
        var link = new Link();
        var arr = [];

        link.Clean();
        arr = reset(link);
        link.Forward(arr[0]);
        assert.equal(link.print().join(", "), "key_4, key_3, key_2, key_0, key_1");


        link.Clean();
        arr = reset(link);
        link.Forward(arr[1]);
        assert.equal(link.print().join(", "), "key_4, key_3, key_1, key_2, key_0");

        link.Clean();
        arr = reset(link);
        link.Forward(arr[2]);
        assert.equal(link.print().join(", "), "key_4, key_2, key_3, key_1, key_0");
    });

    it("Backward", function () {
        var link = new Link();
        var arr = [];

        link.Clean();
        arr = reset(link);
        link.Backward(arr[4]);
        assert.equal(link.print().join(", "), "key_3, key_4, key_2, key_1, key_0");


        link.Clean();
        arr = reset(link);
        link.Backward(arr[3]);
        assert.equal(link.print().join(", "), "key_4, key_2, key_3, key_1, key_0");

        link.Clean();
        arr = reset(link);
        link.Backward(arr[1]);
        assert.equal(link.print().join(", "), "key_4, key_3, key_2, key_0, key_1");
    });
});