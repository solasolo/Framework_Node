const path = require('path');
const Util = require('util');
import { Facility } from 'CommonUtils';
const Pool = require('../lib/ConnectionPool.js');

class TestObject {
    private Index: number;

    constructor(index: number) {
        this.Index = index;

        console.log(`${this.Index} is Created`);
    }

    HandleError() {
        // TODO
    }

    async Open() {
        console.log(`${this.Index} is opened`);
    }
}

class TestFactory {
    Count: number;

    constructor() {
        this.Count = 0;
    }

    Create() {
        let obj = new TestObject(this.Count++);

        return obj;
    }
}

function Test(n: number) {
    let GotCount = 0;

    let ObjectList = new Array(n);

    let pool = new Pool(new TestFactory());

    for (let i = 0; i < n; i++) {
        let promise = pool.Acquire();
        promise.then((o: any) => {
            ObjectList[i] = o;
            console.log(`Got ${o.Index}, ${++GotCount}`);
        },
            (e: Error) => {
                console.log(e);
            });
    }

    console.log("==========");

    let count = 0;

    function Wait() {
        let obj = ObjectList[count];

        if (obj) {
            pool.Release(obj);
            ObjectList[count] = null;

            console.log(`Release ${obj.Index}`);
        }

        count++;
        if (count >= n) count = 0;

        setTimeout(Wait, 10);
    }

    Wait();
}

Test(100);