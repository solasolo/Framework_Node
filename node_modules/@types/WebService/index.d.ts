import { ISessionObject } from "WebApp"

declare interface Router {

}

declare interface IHandler {

}

declare interface IWebContext {
    Request: IWebRequest;
    Response: IWebResponse;
    Action: string;

    HandleData(data: any, json?: boolean, success?: (data: any) => Promise<void>): void;
}

declare interface IWebRequest {
    Url: string;
    Method: string;
    RemoteIP: string;
    Agent: string;
    Referer: string;
    Queries: any;

    PathShift(): string;

    ReadPostRaw(): Promise<string>;
    ReadPostString(): Promise<string>;
    ReadPostData(): Promise<any>;
    ReadPostJSON(): Promise<any>;

    ReadSession(): Promise<ISessionObject>;
    ReadSessionID(): string;
    GetCookie(key: string): string;
    Cookies(): string[];

    AcceptMethod(method: string): void;
}

declare interface IWebResponse {
    StringOutput(txt: string): void;
    JSONOutput(obj: any): void;
}

declare interface IBaseRouter {
    Get(name: string): any;
}

declare interface IAPIBase {
    _Request_: IWebRequest;
}

export class BaseRouter implements IBaseRouter {
    Get(name: string): any;
}

export class BaseHandler {
    static MK_ROUTE_FUN(fun: (req: IWebRequest) => {}): boolean;
}

export class Server {
    constructor(disp: Dispatcher, opts: object);
    Start(): void;
}

export class Dispatcher {
    constructor(factory: IHandler, router: Router);
}

export class RestfulHandler implements IHandler {

}

export class RPCHandler implements IHandler {

}

export class RequestHandler implements IHandler {

}

export class RouterHandler implements IHandler {

}

export class MapRouter {
    constructor(routes?: object);
    AddPath(path: string, filter: any[]): void;
}

export class APIBase {
    constructor(req?: IWebRequest);

    protected _Request_: IWebRequest;
    protected _GetRequest(args: IArguments): IWebRequest;
}
